/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.32
 * Generated at: 2023-06-22 08:32:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.view;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import bean.MemberDTO;

public final class userMypage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("bean.MemberDTO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!-- http://localhost:8080/kanda_team1/view/userMypage.jsp -->\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ja\">\r\n");
      out.write("<head>\r\n");
      out.write("\t<!-- 文字コード -->\r\n");
      out.write("\t<meta charset=\"UTF-8\">\r\n");
      out.write("\r\n");
      out.write("\t<!-- コンテキストパス取得 -->\r\n");
      out.write("\t");
 String context = request.getContextPath();
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("\t<!-- セッションから会員情報取得 -->\r\n");
      out.write("\t");
 MemberDTO member = (MemberDTO)session.getAttribute("member"); 
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t");
 if(member==null){
		request.setAttribute("error", "ログインしていないかセッション切れです");
		request.getRequestDispatcher("/view/error.jsp").forward(request, response);

	} 
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t");
 String memberName=member.getMamberName(); 
      out.write('\r');
      out.write('\n');
      out.write('	');
 String kanaFamilyName = member.getKanaFamilyName(); 
      out.write('\r');
      out.write('\n');
      out.write('	');
 String kanaFirstName = member.getKanaFirstName(); 
      out.write('\r');
      out.write('\n');
      out.write('	');
 String kanjiFirstName = member.getKanjiFirstName(); 
      out.write('\r');
      out.write('\n');
      out.write('	');
 String kanjiFamilyName = member.getKanjiFamilyName(); 
      out.write('\r');
      out.write('\n');
      out.write('	');
 String residence = member.getResidence();
      out.write('\r');
      out.write('\n');
      out.write('	');
 String mail = member.getMail();
      out.write('\r');
      out.write('\n');
      out.write('	');
 String phone = member.getTelephoneNumber();
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<title>○○画面</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<!-- メイン要素 -->\r\n");
      out.write("\r\n");
      out.write("\t会員名：");
      out.print( memberName );
      out.write("<br>\r\n");
      out.write("\t姓(かな)：");
      out.print( kanaFamilyName);
      out.write("<br>\r\n");
      out.write("\t名(かな)：");
      out.print( kanaFirstName);
      out.write("<br>\r\n");
      out.write("\t姓(漢字)：");
      out.print( kanjiFirstName);
      out.write("<br>\r\n");
      out.write("\t名(漢字)：");
      out.print( kanjiFamilyName);
      out.write("<br>\r\n");
      out.write("\t登録住所：");
      out.print( residence);
      out.write("<br>\r\n");
      out.write("\tMAIL：");
      out.print( mail);
      out.write("<br>\r\n");
      out.write("\t電話番号：");
      out.print( phone);
      out.write("<br>\r\n");
      out.write("\r\n");
      out.write("\t<form action=\"");
      out.print( context );
      out.write("/ExhibitList\" >\r\n");
      out.write("\t\t<input type=\"submit\" value=\"出品一覧\">\r\n");
      out.write("\t</form>\r\n");
      out.write("\r\n");
      out.write("\t<form action=\"\" method=\"POST\">\r\n");
      out.write("\t\t<input type=\"submit\" value=\"購入一覧\">\r\n");
      out.write("\t</form>\r\n");
      out.write("\r\n");
      out.write("\t<form action=\"");
      out.print( context );
      out.write("/product\">\r\n");
      out.write("\t\t<input type=\"submit\" value=\"商品一覧\">\r\n");
      out.write("\t</form>\r\n");
      out.write("\r\n");
      out.write("\t<form action=\"");
      out.print( context );
      out.write("/view/memberInformationScreen.jsp\">\r\n");
      out.write("\t\t<input type=\"submit\" value=\"登録情報変更\">\r\n");
      out.write("\t</form>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
